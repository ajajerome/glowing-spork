name: iOS CI (Scheduled + On Push)
on:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 5 * * *'
  workflow_dispatch:

jobs:
  simulator:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4

      - name: Install tools
        run: |
          brew install xcodegen || true
          gem install fastlane --no-document
          gem install xcpretty --no-document

      - name: Generate Xcode project
        run: |
          cd ios
          xcodegen generate
          echo "WORKING_DIR=$(pwd)" >> $GITHUB_ENV

      - name: Build simulator app
        working-directory: ${{ env.WORKING_DIR }}
        run: fastlane sim

      - name: Upload simulator artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-simulator-app
          path: simulator_app.zip

  testflight:
    needs: simulator
    if: ${{ secrets.SIGNING_CERT_P12 && secrets.SIGNING_CERT_PASSWORD && secrets.PROVISIONING_PROFILE }}
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4

      - name: Install tools
        run: |
          brew install xcodegen || true
          gem install fastlane --no-document
          gem install xcpretty --no-document

      - name: Generate Xcode project
        run: |
          cd ios
          xcodegen generate
          echo "WORKING_DIR=$(pwd)" >> $GITHUB_ENV

      - name: Import code signing assets
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.SIGNING_CERT_P12 }}
          p12-password: ${{ secrets.SIGNING_CERT_PASSWORD }}
          profile-base64: ${{ secrets.PROVISIONING_PROFILE }}

      - name: Build and upload to TestFlight
        working-directory: ${{ env.WORKING_DIR }}
        env:
          ASC_ISSUER_ID: ${{ secrets.ASC_ISSUER_ID }}
          ASC_KEY_ID: ${{ secrets.ASC_KEY_ID }}
          ASC_API_KEY_P8: ${{ secrets.ASC_API_KEY_P8 }}
          TEAM_ID: ${{ secrets.TEAM_ID }}
          BUNDLE_ID: ${{ secrets.BUNDLE_ID }}
        run: fastlane ci

name: iOS CI (TestFlight)
on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  simulator:
    name: Build iOS Simulator app (no signing)
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
      - name: Install Fastlane
        run: gem install fastlane --no-document
      - name: Build simulator .app
        run: fastlane sim
      - name: Upload simulator artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-simulator-app
          path: |
            simulator_app.zip

  testflight:
    name: TestFlight upload
    needs: simulator
    if: ${{ secrets.SIGNING_CERT_P12 && secrets.SIGNING_CERT_PASSWORD && secrets.PROVISIONING_PROFILE }}
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
      - name: Install Fastlane
        run: gem install fastlane --no-document
      - name: Import code signing assets
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.SIGNING_CERT_P12 }}
          p12-password: ${{ secrets.SIGNING_CERT_PASSWORD }}
          profile-base64: ${{ secrets.PROVISIONING_PROFILE }}
      - name: Build and upload to TestFlight
        env:
          ASC_ISSUER_ID: ${{ secrets.ASC_ISSUER_ID }}
          ASC_KEY_ID: ${{ secrets.ASC_KEY_ID }}
          ASC_API_KEY_P8: ${{ secrets.ASC_API_KEY_P8 }}
          TEAM_ID: ${{ secrets.TEAM_ID }}
          BUNDLE_ID: ${{ secrets.BUNDLE_ID }}
          SCHEME: ${{ secrets.SCHEME }}
          WORKSPACE: ${{ secrets.WORKSPACE }}
        run: fastlane ci
      - name: Upload ipa artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: |
            ./build/**/*.ipa
            ./*.ipa

    Lägg in Fastlane‑filen om den inte finns

    Add file → Create new file
    Filnamn: fastlane/Fastfile
    Klistra in:

default_platform(:ios)

platform :ios do
  desc "CI: tests, build, upload to TestFlight"
  lane :ci do
    require 'json'
    api = app_store_connect_api_key(
      key_id: ENV["ASC_KEY_ID"],
      issuer_id: ENV["ASC_ISSUER_ID"],
      key_content: ENV["ASC_API_KEY_P8"],
      in_house: false
    )

    # Autodetect workspace/project
    workspace = ENV["WORKSPACE"]
    project = nil
    workspace = Dir["*.xcworkspace"].first if workspace.nil? || workspace.strip.empty?
    project = Dir["*.xcodeproj"].first if workspace.nil?
    UI.user_error!("No Xcode workspace or project found in repository root") if workspace.nil? && project.nil?

    # Autodetect scheme
    schemes = []
    out = workspace ? sh("xcodebuild -list -json -workspace \"#{workspace}\"") : sh("xcodebuild -list -json -project \"#{project}\"")
    json = JSON.parse(out) rescue {}
    schemes += (json.dig('workspace', 'schemes') || [])
    schemes += (json.dig('project', 'schemes') || [])
    schemes.uniq!
    scheme = ENV["SCHEME"]
    scheme = schemes.first if (scheme.nil? || scheme.strip.empty?) && !schemes.empty?
    UI.user_error!("No scheme found. Please set SCHEME secret or ensure a shared scheme exists") if scheme.nil? || scheme.strip.empty?

    run_tests(scheme: scheme, devices: ["iPhone 15"])

    if workspace
      build_app(workspace: workspace, scheme: scheme, export_method: "app-store")
    else
      build_app(project: project, scheme: scheme, export_method: "app-store")
    end

    pilot(api_key: api, skip_waiting_for_build_processing: true)
  end

  desc "SIM: build iOS Simulator .app and zip as artifact"
  lane :sim do
    require 'json'
    workspace = ENV["WORKSPACE"]
    project = nil
    workspace = Dir["*.xcworkspace"].first if workspace.nil? || workspace.strip.empty?
    project = Dir["*.xcodeproj"].first if workspace.nil?
    UI.user_error!("No Xcode workspace or project found in repository root") if workspace.nil? && project.nil?

    schemes = []
    out = workspace ? sh("xcodebuild -list -json -workspace \"#{workspace}\"") : sh("xcodebuild -list -json -project \"#{project}\"")
    json = JSON.parse(out) rescue {}
    schemes += (json.dig('workspace', 'schemes') || [])
    schemes += (json.dig('project', 'schemes') || [])
    schemes.uniq!
    scheme = ENV["SCHEME"]
    scheme = schemes.first if (scheme.nil? || scheme.strip.empty?) && !schemes.empty?
    UI.user_error!("No scheme found. Please set SCHEME secret or ensure a shared scheme exists") if scheme.nil? || scheme.strip.empty?

    sh("rm -rf build")
    if workspace
      sh("xcodebuild -workspace \"#{workspace}\" -scheme \"#{scheme}\" -configuration Debug -sdk iphonesimulator -destination 'generic/platform=iOS Simulator' -derivedDataPath build clean build | xcpretty")
    else
      sh("xcodebuild -project \"#{project}\" -scheme \"#{scheme}\" -configuration Debug -sdk iphonesimulator -destination 'generic/platform=iOS Simulator' -derivedDataPath build clean build | xcpretty")
    end

    app_path = Dir["build/Build/Products/**/Debug-iphonesimulator/*.app"].first
    UI.user_error!(\"Simulator .app not found in derived data\") if app_path.nil?

    zip_target = File.expand_path(\"simulator_app.zip\")
    Dir.chdir(File.dirname(app_path)) { sh(\"zip -r \\\"#{zip_target}\\\" \\\"#{File.basename(app_path)}\\\"\") }
    UI.success(\"Simulator artifact: #{zip_target}\")
  end
end
