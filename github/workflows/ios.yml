name: iOS CI (TestFlight)
on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  simulator:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4

      - name: Bootstrap iOS skeleton if missing
        run: |
          set -e
          if ! find . -maxdepth 4 -name "*.xcodeproj" -o -name "*.xcworkspace" | grep -q .; then
            mkdir -p ios/Sources ios/Resources
            cat > ios/project.yml <<'EOF'
name: Learnfotball
options:
  deploymentTarget:
    iOS: "16.0"
settings:
  base:
    PRODUCT_BUNDLE_IDENTIFIER: com.ajagames.learnfotball
    DEVELOPMENT_TEAM: MW98Z2Q68W
    SWIFT_VERSION: 5.0
    TARGETED_DEVICE_FAMILY: 1
    IPHONEOS_DEPLOYMENT_TARGET: 16.0
    CURRENT_PROJECT_VERSION: 1
    MARKETING_VERSION: 0.1.0
targets:
  Learnfotball:
    type: application
    platform: iOS
    sources:
      - path: Sources
      - path: Resources
    settings:
      base:
        INFOPLIST_FILE: Info.plist
        ASSETCATALOG_COMPILER_APPICON_NAME: AppIcon
    scheme:
      gatherCoverageData: false
    info:
      path: Info.plist
      properties:
        CFBundleName: Learnfotball
        CFBundleDisplayName: Learnfotball
        UISupportedInterfaceOrientations:
          - UIInterfaceOrientationPortrait
        UIApplicationSceneManifest:
          UIApplicationSupportsMultipleScenes: false
        UILaunchScreen: {}
EOF
            cat > ios/Sources/App.swift <<'EOF'
import SwiftUI
@main
struct LearnfotballApp: App {
    var body: some Scene {
        WindowGroup { ContentView() }
    }
}
EOF
            cat > ios/Sources/ContentView.swift <<'EOF'
import SwiftUI
import SpriteKit
struct PitchScene: SKScene {
    override func didMove(to view: SKView) {
        backgroundColor = .green
        let c = SKShapeNode(circleOfRadius: 40)
        c.fillColor = .white; c.strokeColor = .white
        c.position = CGPoint(x: size.width/2, y: size.height/2)
        addChild(c)
    }
}
struct ContentView: View {
    var scene: SKScene {
        let s = PitchScene()
        s.size = CGSize(width: 390, height: 844)
        s.scaleMode = .resizeFill
        return s
    }
    var body: some View {
        VStack(spacing: 12) {
            Text("Learnfotball MVP").font(.title2).bold()
            SpriteView(scene: scene).ignoresSafeArea()
        }
    }
}
EOF
            cat > ios/Resources/Info.plist <<'EOF'
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0"><dict>
  <key>CFBundleDevelopmentRegion</key><string>en</string>
  <key>CFBundleExecutable</key><string>$(EXECUTABLE_NAME)</string>
  <key>CFBundleIdentifier</key><string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
  <key>CFBundleInfoDictionaryVersion</key><string>6.0</string>
  <key>CFBundleName</key><string>$(PRODUCT_NAME)</string>
  <key>CFBundlePackageType</key><string>APPL</string>
  <key>CFBundleShortVersionString</key><string>$(MARKETING_VERSION)</string>
  <key>CFBundleVersion</key><string>$(CURRENT_PROJECT_VERSION)</string>
  <key>UILaunchStoryboardName</key><string>LaunchScreen</string>
  <key>UIApplicationSceneManifest</key><dict>
    <key>UIApplicationSupportsMultipleScenes</key><false/>
  </dict>
</dict></plist>
EOF
          fi

      - name: Install tools
        run: |
          brew install xcodegen || true
          gem install fastlane --no-document
          gem install xcpretty --no-document

      - name: Generate Xcode project
        run: |
          cd ios
          xcodegen generate
          echo "WORKING_DIR=$(pwd)" >> $GITHUB_ENV

      - name: Build simulator app
        working-directory: ${{ env.WORKING_DIR }}
        run: fastlane sim

      - name: Upload simulator artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-simulator-app
          path: simulator_app.zip

  testflight:
    needs: simulator
    if: ${{ secrets.SIGNING_CERT_P12 && secrets.SIGNING_CERT_PASSWORD && secrets.PROVISIONING_PROFILE }}
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
      - name: Install tools
        run: |
          brew install xcodegen || true
          gem install fastlane --no-document
          gem install xcpretty --no-document
      - name: Generate Xcode project
        run: |
          cd ios
          xcodegen generate
          echo "WORKING_DIR=$(pwd)" >> $GITHUB_ENV
      - name: Import code signing assets
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.SIGNING_CERT_P12 }}
          p12-password: ${{ secrets.SIGNING_CERT_PASSWORD }}
          profile-base64: ${{ secrets.PROVISIONING_PROFILE }}
      - name: Build and upload to TestFlight
        working-directory: ${{ env.WORKING_DIR }}
        env:
          ASC_ISSUER_ID: ${{ secrets.ASC_ISSUER_ID }}
          ASC_KEY_ID: ${{ secrets.ASC_KEY_ID }}
          ASC_API_KEY_P8: ${{ secrets.ASC_API_KEY_P8 }}
          TEAM_ID: ${{ secrets.TEAM_ID }}
          BUNDLE_ID: ${{ secrets.BUNDLE_ID }}
        run: fastlane ci
